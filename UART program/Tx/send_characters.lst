                        ; Origin set to 00000H
   0000                 		ORG  00000H
                        
                        ; CPU Type:
                        		CPU 1802
                        
                        ; Labels:
                        
                        ; Register Definitions:
   0000                 R0		EQU 0
   0001                 R1		EQU 1
   0002                 R2		EQU 2
   0003                 R3		EQU 3
   0004                 R4		EQU 4
   0005                 R5		EQU 5
   0006                 R6		EQU 6
   0007                 R7		EQU 7
   0008                 R8		EQU 8
   0009                 R9		EQU 9
   000a                 RA		EQU 10
   000b                 RB		EQU 11
   000c                 RC		EQU 12
   000d                 RD		EQU 13
   000e                 RE		EQU 14
   000f                 RF		EQU 15
                        
                        ; Start code segment
                        
                        ; antes de empezar suponemos que el dato a enviar está cargado en el registro R2.1 (porque R0 es el contador de programa)
   0000                 INICIO				; esta parte son solo definiciones
   0000   f8 00         		LDI 00H
   0002   b8            		PHI R8
   0003   f8 40         		LDI 40H
   0005   a8            		PLO R8		; se cargó 0040H en R8, que es la SUB de transmisión
   0006   f8 00         		LDI 00H
   0008   b9            		PHI R9
   0009   f8 60         		LDI 60H
   000b   a9            		PLO R9		; se cargó 0060H en R9, que es la SUB de DELAY1 (para la SUB de transmisión)
   000c   f8 00         		LDI 00H
   000e   ba            		PHI RA
   000f   f8 70         		LDI 70H
   0011   aa            		PLO RA		; se cargó 0070H en RA, que es la SUB de DELAY2 (para el programa principal)
                        ;acá está la rutina principal
   0012   7b            		SEQ				; empezamos ponindo la línea estado inactivo
   0013   f8 41         LOOP	LDI 65D			; caracter ascii A (mayúscula)
   0015   a4            		PLO R4			; cargo el valor de D a R4 (para tener guardado el último caracter enviado)
   0016   b2            		PHI R2			; cargo el valor de D a R2 (para la subrutina)
   0017   f8 07         		LDI 07H			; cargo 7 en D
   0019   a5            		PLO R5			; cargo D en R5.0 (para hacer 7 repeticiones en la rutina SEND)
   001a   d8            SEND	SEP R8			; llamo a la SUB que transmite lo que está en R2
   001b   da            		SEP RA			; llamo a la SUB DELAY2
   001c   14            		INC R4			; incremento R4 (paso al siguiente caracter)
   001d   84            		GLO R4			; carga R4.0 en D
   001e   b2            		PHI R2			; carga D en R2.1
   001f   25            		DEC R5			; decremento R5
   0020   85            		GLO R5			; carga la parte baja de R3 en D
   0021   3a 1a         		BNZ SEND		; salta si D != 0 (va a saltar 7 veces, enviando ABCDEFG)
                        	; envio CRLF para hacer el salto de línea
   0023   f8 0d         		LDI 13D			; caracter ascii CR (carriage return)
   0025   b2            		PHI R2			; cargo el valor de D a R2 (para la subrutina)
   0026   d8            		SEP R8			; llamo a la SUB que transmite lo que está en R2
   0027   da            		SEP RA			; llamo a la SUB DELAY2
   0028   f8 0a         		LDI 10D			; caracter ascii  (line feed)
   002a   b2            		PHI R2			; cargo el valor de D a R2 (para la subrutina)
   002b   d8            		SEP R8			; llamo a la SUB que transmite lo que está en R2
   002c   da            		SEP RA			; llamo a la SUB DELAY2
   002d   30 13         		BR LOOP			; salto incondicional
                        
                        
                        ;---------subrutina de trasmisión de datos-------------------------
   003f                 		ORG  0003FH
   003f   d0            BACK1	SEP R0		; retorna a la subrutina principal
   0040                 TRANSM
   0040   7b            		SEQ			; Q = 1 (línea en estado inactivo)
   0041   7a            		REQ  		; Q = 0 (bit de start)
   0042   d9            		SEP R9		; llamar subrutina de demora de 3,33 ms
   0043   f8 08         		LDI 08H		; carga el valor inmediato en D
   0045   a3            		PLO R3		; carga el valor de D en R3.0 (este es el contador para iterar cada bit del dato en R2)
                        					; tiene que ser la parte baja de R3, porque DEC R3 decrementa el registro entero de 16 bits
   0046   92            SHIFT	GHI R2		; carga el valor de R2.1 en D (acá se supone que está el byte que queremos transmitir)
   0047   f6            		SHR			; desplaza D a la deracha, cargando el LSB en el bit DF
   0048   b2            		PHI R2		; carga el valor de D en R2.1
   0049   3b 4d         		BNF ESCERO	; salta si DF = 0
   004b   7b            		SEQ			; salida Q igual a 1
   004c   38            		SKP			; salta la siguiente instrucción de manera incondicional
   004d   7a            ESCERO	REQ			; salida Q igual a 0
   004e   d9            		SEP R9		; llamar subrutina de demora de 3,33 ms
   004f   23            		DEC R3		; decremento el contador
   0050   83            		GLO R3		; carga la parte baja de R3 en D
   0051   3a 46         		BNZ SHIFT	; salta si D != 0
   0053   7b            		SEQ			; Q = 1 (bit de stop) (el ingeniero Korpys dijo que ponga dos bits de stop (dos bit-time))
   0054   d9            		SEP R9		; llamar subrutina de demora de 3,33 ms dos veces
   0055   d9            		SEP R9
   0056   30 3f         		BR BACK1	; salto incondicional
                        
                        
                        
                        
                        
                        ;---------subrutina de ratardo de tranmisión-------------------------
   005f                 		ORG  0005FH
   005f   d8            BACK2	SEP R8			; retorna a subrutina de transmisión 1-Byte	2-Machine Cycles	1 time
   0060                 DELAY1
   0060   f8 7b         		LDI  123D		; carga el valor inmediato en D		2-Byte	2-Machine Cycles	1 time
   0062   a1            		PLO  R1			; carga el valor de D en R1.1		1-Byte	2-Machine Cycles	1 time
   0063                 TIMER1
   0063   21            		DEC  R1     	; decrementa R1						1-Byte	2-Machine Cycles	R1 times
   0064   81            		GLO  R1     	; carga la parte alta de R1 en D	1-Byte	2-Machine Cycles	R1 times
   0065   3a 63         		BNZ  TIMER1   	; salta si D != 0					2-Byte	2-Machine Cycles	R1 times
   0067   30 5f         		BR   BACK2		; salto incondicional				2-Byte	2-Machine Cycles	1 time
                        
                        
                        ;---------subrutina de retardo del programa principal-------------------------
   006f                 		ORG  0006FH
   006f   d0            BACK3	SEP R0			; retorna a la rutina principal
   0070                 DELAY2
   0070   f8 50         		LDI  050H		; carga el valor inmediato en D
   0072   b1            		PHI  R1			; carga el valor de D en R1.1
   0073                 TIMER2
   0073   21            		DEC  R1     	; decrementa R1
   0074   91            		GHI  R1     	; carga la parte alta de R1 en D
   0075   3a 73         		BNZ  TIMER2   	; salta si D != 0
   0077   30 6f         		BR   BACK3		; salto incondicional
   0079                 		END
003f  BACK1         005f  BACK2         006f  BACK3         0060  DELAY1    
0070  DELAY2        004d  ESCERO        0000  INICIO        0013  LOOP      
0000  R0            0001  R1            0002  R2            0003  R3        
0004  R4            0005  R5            0006  R6            0007  R7        
0008  R8            0009  R9            000a  RA            000b  RB        
000c  RC            000d  RD            000e  RE            000f  RF        
001a  SEND          0046  SHIFT         0063  TIMER1        0073  TIMER2    
0040  TRANSM        
